@default-repository = repo(repo('central', 'https://repo1.maven.org/maven2'),
                           repo('clojars', 'http://clojars.org/repo'))

@import ('org.bovinegenius', 'forge-js', '0.1.0') as js
@import ('org.clojure', 'clojure', '1.5.1') as clojure

remote = repo(repo('central', 'https://repo1.maven.org/maven2'),
              repo('clojars', 'http://clojars.org/repo'))

compile-deps =
  deps(remote.jar('org.clojure', 'clojure', '1.5.1'))

runtime-deps =
  deps(remote.jar('org.clojure', 'clojure', '1.5.1'),
       remote.jar('ring', 'ring-jetty-adapter', '1.1.0'),
       jar('lib/render.jar'))

generate-parser(grammar, outfile) =
  js.script('scripts/generate-parser.js').generateParser(grammar, outfile)
  js.call(file = 'scripts/generate-parser.js',
          func = 'generateParser'
          args = [grammar, outfile])

protoc-lib = remote.jar('org.bovinegenius', 'protoc', '0.1.0')

protoc(java-out, proto) =
  protoc-lib.call(class = 'org.bovinegenius.protoc.ProtoC',
                  method = 'compile',
                  args = [proto, java-out])
  sources(java-out)

protobuf-sources:
  protoc(java-out = 'target/protobuf-src',
         proto = ['proto/data.proto', 'proto/commands.proto'])

compile[protobuf-sources]:
  compile-scala(deps = [compile-deps, runtime-deps],
                src = ['src', 'target/protobuf-src'],
                classes = 'target/classes')

package[compile]:
  jar(inputs = ['target/classes', runtime-deps, 'src/resources'],
      output = 'program.jar')

